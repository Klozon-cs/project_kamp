<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Academy</title>
    <link rel="stylesheet" href="/bootstrap/css/bootstrap.min.css">
    <link rel="stylesheet" href="/public/css/app.css">
    <link rel="stylesheet" href="/public/css/dragging.css">
    <script src="/bootstrap/js/bootstrap.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">
</head>

<body>

    <div class="header">
        <div>
            <img src="/public/img/logo.png" alt="Project kamp logo" class="logo">
        </div>
        <div>
            <a href="http://" class="btn--">Academy</a>
            <a href="http://" class="btn--">Research</a>
        </div>
    </div>
    <div id="bottom">
        <nav>
            <%- navItems%>
        </nav>
        <div class="d-flex justify-content-center w-100 pt-5" style="max-height: 100%; overflow: scroll;">
            <div class="content pb-5">
                <form action="/store/<%- id %>" method="post" id="storeForm" enctype="multipart/form-data">
                    <%- contentHTML %>

                </form>
                <button type="submit" class="btn btn-success mb-5" for="storeForm">Save</button>
            </div>
        </div>
        <div class="options-menu">
            <div class="option" id="6">
                <i class="fa-brands fa-youtube"></i>
                <div>Video</div>
            </div>
        </div>
    </div>


</body>
<script src="/public/js/doc.js"></script>

<script>
import templates from '/public/js/templates.js'


const sortableList = document.getElementById('storeForm');
let list_items = sortableList.querySelectorAll(".draggable");
let type = false; //false = list item, true = option item

for (const item of list_items) {
    dragState(item, false)
}

const options = document.getElementsByClassName('option');

for (const option of options) {
    dragState(option, true)
}


let nextSibling;
let newNode;
const initSortableList = (e) => {
    e.preventDefault();
    const draggingItem = document.querySelector(".dragging");
    // Getting all items except currently dragging and making array of them
    let siblings = [...document.querySelectorAll(".draggable:not(.dragging)")];

    // Finding the sibling after which the dragging item should be placed
    nextSibling = siblings.find(sibling => {
        //const xCondition = e.clientX <= sibling.offsetLeft + sibling.offsetWidth / 1.5;
        const yCondition = e.clientY <= sibling.offsetTop + sibling.offsetHeight / 1.5;

        // return xCondition && yCondition;
        return yCondition;
    });

    if (type) {
        const parser = new DOMParser();

        //SOLVING THIS FUCKER !!!!!!!!
        const doc = parser.parseFromString(templates.renderInput({type_id:draggingItem.id}), 'text/html');

        // Extract the first element
        newNode = doc.body.firstElementChild;

        dragState(newNode, false);

        sortableList.addEventListener("drop", () => {
            sortableList.insertBefore(newNode, nextSibling);
        });
    } else {
        sortableList.insertBefore(draggingItem, nextSibling);
    }
}
sortableList.addEventListener("dragover", initSortableList);
sortableList.addEventListener("dragenter", e => e.preventDefault());


function textRegularInput(content = "Text") {
    return `   <div class="element-container draggable">
                    <div contenteditable="true" class="doc-input div-input">${content}</div>
                    <input type="hidden" name="text_regular" class="doc-input" >
                    <div class="btnDelete">
                        <i class="fa-solid fa-xmark" onclick="deleteElement(this)"></i>
                    </div>
            </div>`;
}


function dragState(node, node_type) {
    node.draggable = "true";

    node.addEventListener("dragstart", () => {
        // Adding dragging class to item after a delay
        setTimeout(() => node.classList.add("dragging"), 0);
        type = node_type;
    });

    // Removing dragging class from item on dragend event
    node.addEventListener("dragend", () => {
        node.classList.remove("dragging")
        type = !node_type;
    });
}



</script>

</html>